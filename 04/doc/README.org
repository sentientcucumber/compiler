#+TITLE: Assignment 4
#+AUTHOR: Michael Hunsinger
#+OPTIONS: toc:nil
#+LATEX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [a4paper]
#+LaTeX_HEADER: \usepackage{titling}
#+LaTeX_HEADER: \addtolength{\topmargin}{-0.75in}
#+LaTeX_HEADER: \addtolength{\textheight}{1.25in}
#+LaTeX_HEADER: \addtolength{\oddsidemargin}{-.75in}
#+LaTeX_HEADER: \addtolength{\evensidemargin}{-.75in}
#+LaTeX_HEADER: \addtolength{\textwidth}{1.75in}
#+LaTeX_HEADER: \usepackage{paralist}
#+LaTeX_HEADER: \setlength\parindent{0pt}
#+LaTeX_HEADER: \let\itemize\compactitem
#+LaTeX_HEADER: \let\description\compactdesc
#+LaTeX_HEADER: \let\enumerate\compactenum

* Change log
** [2014-09-08 Mon]
   - Changed the Reader from the bufio package to the bytes package. The
     bufio Reader is made to read streaming data and cannot perform seeks.
   - Changed ~compiler.go~ to a ~scanner.go~, so it is more appropriately
     named for future implementations.
   - Added a ~parser.go~ file to implement a compiler's parser functionality.
   - Added the ability to pass in the file on the command line.
** [2014-09-15 Mon]
   - Moved ~token.go~ to ~types.go~ and added support for Operator, ExprRec,
     and ExprKind.
   - Added semantic routines to the parser.
   - When running the program, the user must add a second parameter for the
     output file. For example, ~./main simple.micro generatedOutput~ will
     create a file ~generatedOutput~ with all the assembly operations generated
     during parsing.

** [2014-09-21 Sun]
   - Changed the scanner provide lexical analysis.
   - Removed the ~parser.go~ file with the new scanner implementation.
   - Added better checking for files passed in at execution.
   - Tokens are no longer their own structs, they're now an ~int~.

* Go Documentation
This implentation of the scanner uses Google's new language Go. There are
instructions on how to setup Go, a description of the file structure, and
how to compile and run the program.

** Install Go
   Download the appropriate installation from Google's Go website,
   http://golang.org/doc/install, there is additional documentation located
   on website as well.

** Go's Workspace
   Extract files from the tarball into the desired location. Inside the root
   folder you will find four directories
   - ~bin~ compiled executables, along with sample micro program files
   - ~doc~ documentation
   - ~pkg~ package objects (the compiler package is located in here)
   - ~src~ source files
     - ~compiler~ source files pertaining to the compiler package
     - ~main~ source files pertaining to the main package (the driver file)

   We must also setup the ~GOPATH~ to ensure proper compilation of the files.
   Follow the steps below to set ~GOPATH~ in a *unix environment. 
   #+BEGIN_SRC 
   $ cd ../03
   $ export GOPATH=$HOME/your/path/here/03
   #+END_SRC
   
** Compiling Source Files
   There are two steps to compile and the executable; building the compiler
   package and then build the executable.
   #+BEGIN_SRC 
   $ cd ../03
   $ go build compiler
   $ go install main
   #+END_SRC
   Now there is an executable in the ~bin~ folder.

** Running the Program
   You can run the executable that was compiled. Ensure you are in the 
   directory where the ~simple.micro~ file is located.
   #+BEGIN_SRC 
   $ cd ../03/bin
   $ ./main simple.micro
   #+END_SRC
   This will run scan the ~simple.micro~ file. There is also a ~complex.micro~
   file in the ~bin~ folder that uses some of the tokens found in the 
   extended Micro language.

* Sample Input and Output
  Sample output was almost identical to the previous version of the scanner with
  the exception of the recording comment tokens.
  
  #+BEGIN_SRC 
  simple.micro input

  BEGIN A := BB + 314 + A; END EofSym

  simple.micro output 

  BeginSym Id AssignOp Id PlusOp IntLiteral PlusOp Id SemiColon EndSym EofSym

  complex.micro input

  BEGIN --SOMETHING UNUSUAL
     READ(A1, New_A, D, B);
     C:= A1 +(New_A - D) - 75;
     New_C:=((B - (7) + (C + D))) - (3 - A1); -- STUPID FORMULA
     WRITE(C, A1 + New_C);
     -- WHAT ABOUT := B + D;
  END

  complex.micro output

  BeginSym Comment ReadSym LParen Id Comma Id Comma Id Comma Id RParen SemiColon
  Id AssignOp Id PlusOp LParen Id MinusOp Id RParen MinusOp IntLiteral SemiColon
  Id AssignOp LParen LParen Id MinusOp LParen IntLiteral RParen PlusOp LParen Id
  PlusOp Id RParen RParen RParen MinusOp LParen IntLiteral MinusOp Id RParen
  SemiColon Comment WriteSym LParen Id Comma Id PlusOp Id RParen SemiColon
  Comment EndSym EofSym
  #+END_SRC
* Regex and DFA
  The first DFA diagram results in the following regex expression:
  #+BEGIN_CENTER
  a (b)* a | b (a)* b
  #+END_CENTER

  The second DFA diagram results in the following regex expression:
  #+BEGIN_CENTER
  a ( bcda | cda )*
  #+END_CENTER
  
  Below is a deterministic finite automata for the (a | (bc)* d)+
  #+BEGIN_CENTER
  #+BEGIN_SRC dot :file fsm.png :cmdline -Kdot -Tpng
  digraph G {
      rankdir = LR
      ratio = expand
      size = "10,4"
      edge [dir=one]

      node [shape = doublecircle, label = ""]; end;
      node [shape = point]; start;
      node [shape = circle, label = ""];

      start -> begin
      begin -> first [label = "b"]
      first -> begin [label = "c"]
      begin -> end   [label = "a"]
      begin -> end   [label = "d"]
  }
  #+END_SRC
  #+END_CENTER

  Below is the regular expression for Pascal-like fixed decimal literal.
  #+BEGIN_CENTER
  (D* | 0) . D* Not(0)
  #+END_CENTER

  A regular set is defined as a set of defined tokens from a given "alphabet".
  If R is a regular expression that can describe of define a regular set, then
  applying the reverse operator will have no affect on the fact that R is a 
  regular set. That is, the resulting set from Rev(R) is also a regular set.
  
