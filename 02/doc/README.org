#+TITLE: Assignment 1
#+AUTHOR: Michael Hunsinger
#+OPTIONS: toc:nil
#+LATEX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [a4paper]
#+LaTeX_HEADER: \usepackage{titling}
#+LaTeX_HEADER: \addtolength{\topmargin}{-1.375in}
#+LaTeX_HEADER: \addtolength{\textheight}{1.75in}
#+LaTeX_HEADER: \addtolength{\oddsidemargin}{-.375in}
#+LaTeX_HEADER: \addtolength{\evensidemargin}{-.875in}
#+LaTeX_HEADER: \addtolength{\textwidth}{0.75in}
#+LaTeX_HEADER: \usepackage{paralist}
#+LaTeX_HEADER: \let\itemize\compactitem
#+LaTeX_HEADER: \let\description\compactdesc
#+LaTeX_HEADER: \let\enumerate\compactenum

* Change log
  - Changed the Reader from the bufio package to the bytes package. The
    bufio Reader is made to read streaming data and cannot perform seeks.
  - Changed ~compiler.go~ to a ~scanner.go~, so it is more appropriately
    named for future implementations.
  - Added a ~parser.go~ file to implement a compiler's parser functionality.
  - Added the ability to pass in the file on the command line.

* Go Documentation
This implentation of the scanner uses Google's new language Go. There are
instructions on how to setup Go, a description of the file structure, and
how to compile and run the program.

** Install Go
   Download the appropriate installation from Google's Go website,
   http://golang.org/doc/install, there is additional documentation located
   on website as well.

** Go's Workspace
   Extract files from the tarball into the desired location. Inside the root
   folder you will find four directories
   - ~bin~ compiled executables, along with sample micro program files
   - ~doc~ documentation
   - ~pkg~ package objects (the compiler package is located in here)
   - ~src~ source files
     - ~compiler~ source files pertaining to the compiler package
     - ~main~ source files pertaining to the main package (the driver file)

   We must also setup the ~GOPATH~ to ensure proper compilation of the files.
   Follow the steps below to set ~GOPATH~ in a *unix environment. 
   #+BEGIN_SRC 
   $ cd ../01
   $ export GOPATH=$HOME/your/path/here/01
   #+END_SRC
   
** Compiling Source Files
   There are two steps to compile and the executable; building the compiler
   package and then build the executable.
   #+BEGIN_SRC 
   $ cd ../01
   $ go build compiler
   $ go install main
   #+END_SRC
   Now there is an executable in the ~bin~ folder.

** Running the Program
   You can run the executable that was compiled. Ensure you are in the 
   directory where the ~sample.micro~ file is located.
   #+BEGIN_SRC 
   $ cd ../02/bin
   $ ./main sample.micro
   #+END_SRC
   This will run scan the ~sample.micro~ file. There is also a ~sample2.micro~
   file in the ~bin~ folder that uses some of the tokens found in the 
   extended Micro language. If you wish to scan this file, you will need to
   change file name in ~../src/main/main.go~ on line 18.

* Sample Input and Output
  #+BEGIN_SRC 
  sample.micro input
  BEGIN A := B + (72 - C); END

  sample.micro output
  Parsing system goal
  Parsing program
  Legal token: BeginSym, passed token: BeginSym
  Parsing statement list
  Parsing statement
  Parsing Ident
  Legal token: Id, passed token: Id
  Legal token: AssignOp, passed token: AssignOp
  Parsing Expression
  Parsing Primary
  Parsing Ident
  Legal token: Id, passed token: Id
  Parsing AddOp
  Legal token: PlusOp, passed token: PlusOp
  Parsing Expression
  Parsing Primary
  Legal token: LParen, passed token: LParen
  Parsing Expression
  Parsing Primary
  Legal token: IntLiteral, passed token: IntLiteral
  Parsing AddOp
  Legal token: MinusOp, passed token: MinusOp
  Parsing Expression
  Parsing Primary
  Parsing Ident
  Legal token: Id, passed token: Id
  Legal token: RParen, passed token: RParen
  Legal token: SemiColon, passed token: SemiColon
  Legal token: EndSym, passed token: EndSym
  #+END_SRC
  
  
  
