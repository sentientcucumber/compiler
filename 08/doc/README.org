#+TITLE: Assignment 6
#+AUTHOR: Michael Hunsinger
#+OPTIONS: toc:nil
#+LATEX_CLASS: article
#+LaTeX_CLASS_OPTIONS: [a4paper]
#+LaTeX_HEADER: \usepackage{titling}
#+LaTeX_HEADER: \addtolength{\topmargin}{-0.75in}
#+LaTeX_HEADER: \addtolength{\textheight}{1.25in}
#+LaTeX_HEADER: \addtolength{\oddsidemargin}{-.75in}
#+LaTeX_HEADER: \addtolength{\evensidemargin}{-.75in}
#+LaTeX_HEADER: \addtolength{\textwidth}{1.75in}
#+LaTeX_HEADER: \usepackage{paralist}
#+LaTeX_HEADER: \setlength\parindent{0pt}
#+LaTeX_HEADER: \let\itemize\compactitem
#+LaTeX_HEADER: \let\description\compactdesc
#+LaTeX_HEADER: \let\enumerate\compactenum

* Change log
** [2014-09-08 Mon]
   - Changed the Reader from the bufio package to the bytes package. The
     bufio Reader is made to read streaming data and cannot perform seeks.
   - Changed ~compiler.go~ to a ~scanner.go~, so it is more appropriately
     named for future implementations.
   - Added a ~parser.go~ file to implement a compiler's parser functionality.
   - Added the ability to pass in the file on the command line.
** [2014-09-15 Mon]
   - Moved ~token.go~ to ~types.go~ and added support for Operator, ExprRec,
     and ExprKind.
   - Added semantic routines to the parser.
   - When running the program, the user must add a second parameter for the
     output file. For example, ~./main simple.micro generatedOutput~ will
     create a file ~generatedOutput~ with all the assembly operations generated
     during parsing.

** [2014-09-21 Sun]
   - Changed the scanner provide lexical analysis.
   - Removed the ~parser.go~ file with the new scanner implementation.
   - Added better checking for files passed in at execution.
   - Tokens are no longer their own structs, they're now an ~int~.

** [2014-09-28 Sun]
   - Implemented a grammar analyzer

** [2014-10-05 Sun]
   - This current implementation doesn't work correctly. There are issues when
     using maps for the sets. Since maps aren't read in a consistent order,
     answers will vary between executions. MarkLambda, ComputeFirst,
     FillFirstSet all work correctly, but will need to be reworked when changes
     are made. FillFollowSet does not work correctly. May have something to do
     with the maps.
** [2014-10-10 Fri]
   - There still appear to be some minor issues regarding filling the
     FollowSet, but nothing that prevents a predict set form being determined
     correctly.
* Go Documentation
This implentation of the scanner uses Google's new language Go. There are
instructions on how to setup Go, a description of the file structure, and
how to compile and run the program.

** Install Go
   Download the appropriate installation from Google's Go website,
   http://golang.org/doc/install, there is additional documentation located
   on website as well.

** Go's Workspace
   Extract files from the tarball into the desired location. Inside the root
   folder you will find four directories
   - ~bin~ compiled executables, along with sample micro program files
   - ~doc~ documentation
   - ~pkg~ package objects (the compiler package is located in here)
   - ~src~ source files
     - ~compiler~ source files pertaining to the compiler package
     - ~main~ source files pertaining to the main package (the driver file)

   We must also setup the ~GOPATH~ to ensure proper compilation of the files.
   Follow the steps below to set ~GOPATH~ in a *unix environment. 
   #+BEGIN_SRC 
   $ cd ../03
   $ export GOPATH=$HOME/your/path/here/03
   #+END_SRC
   
** Compiling Source Files
   There are two steps to compile and the executable; building the compiler
   package and then build the executable.
   #+BEGIN_SRC 
   $ cd ../03
   $ go build compiler
   $ go install main
   #+END_SRC
   Now there is an executable in the ~bin~ folder.

** Running the Program
   You can run the executable that was compiled. Ensure you are in the 
   directory where the ~simple.micro~ file is located.
   #+BEGIN_SRC 
   $ cd ../03/bin
   $ ./main simple.micro
   #+END_SRC
   This will run scan the ~simple.micro~ file. There is also a ~complex.micro~
   file in the ~bin~ folder that uses some of the tokens found in the 
   extended Micro language.

* Sample Input and Output
  #+BEGIN_SRC
  Input for the problem from Assignment 5, 2b
  <S> -> a <S> e
  <S> -> <B>
  <B> -> b <B> e
  <B> -> <C>
  <C> -> c <C> e
  <C> -> d
  
  Output
  First ( a <S> e ) = [a]
  First ( <B> ) = [b c d]
  First ( b <B> e ) = [b]
  First ( <C> ) = [c d]
  First ( c <C> e ) = [c]
  First ( d ) = [d]
  
  Input for Micro language in standard form
  <program>         -> begin <stmt list> end
  <stmt list>       -> <statement> <statement tail>
  <statement tail>  -> <stmt list>
  <statement tail>  ->
  <statement>       -> Id := <expression> ;
  <statement>       -> read ( <id list> ) ;
  <statement>       -> write ( <expr list> ) ;
  <id list>         -> Id <id tail>
  <id tail>         -> , Id <id tail>
  <id tail>         ->
  <expr list>       -> <expression> <expression tail>
  <expression tail> -> , <expr list>
  <expression tail> ->
  <expression>      -> <primary> <primary tail>
  <primary tail>    -> <add op> <expression>
  <primary tail>    ->
  <primary>         -> ( <expression> )
  <primary>         -> Id
  <primary>         -> IntLiteral
  <add op>          -> +
  <add op>          -> -
  <system goal>     -> <program> $
  
  Output
  First ( <addop> <expression> ) = [+ -]
  First ( IntLiteral ) = [IntLiteral]
  First ( <program> $ ) = [begin]
  First ( lambda ) ∪ Follow ( <expressiontail> ) - λ = [)]
  First ( + ) = [+]
  First ( - ) = [-]
  First ( <statement> <statementtail> ) = [read write Id]
  First ( Id := <expression> ; ) = [Id]
  First ( read ( <idlist> ) ; ) = [read]
  First ( , <exprlist> ) = [,]
  First ( lambda ) ∪ Follow ( <primarytail> ) - λ = [; ) ,]
  First ( ( <expression> ) ) = [(]
  First ( <stmtlist> ) = [read write Id]
  First ( lambda ) ∪ Follow ( <statementtail> ) - λ = [end]
  First ( , Id <idtail> ) = [,]
  First ( <primary> <primarytail> ) = [( Id IntLiteral]
  First ( <expression> <expressiontail> ) = [( Id IntLiteral]
  First ( Id ) = [Id]
  First ( begin <stmtlist> end ) = [begin]
  First ( write ( <exprlist> ) ; ) = [write]
  First ( Id <idtail> ) = [Id]
  First ( lambda ) ∪ Follow ( <idtail> ) - λ = [)]
  #+END_SRC
  

