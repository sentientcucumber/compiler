#+TITLE: Assignment 1, Part II
#+AUTHOR: Michael Hunsinger
#+OPTIONS: toc:nil

* Extended Micro Grammer
  Write an extended Micro Grammer to include the equality and exponentiation
  operators. The following grammers are meant to supplement the existing 
  grammer explained in class.\newline
  We will need the following definitions that were already defined in class.
  #+BEGIN_SRC
   <expression> -> <primary> | <primary> <add op> <expression>
   <primary>    -> LParen <expression> RParen
   <primary>    -> Id
   <primary>    -> IntLiteral
   <add op>     -> PlusOp | MinusOp
  #+END_SRC

** Exponential
   The exponentiation should have higher precedence than =PlusOp= and 
   =MinusOp= and should group from right to left, that is, 
   =A**B**C = A**(B**C)=.
   #+BEGIN_SRC
   <expression> -> <primary> | <primary> <exponent> LParen <expression> RParen
   <exponent>   -> ExpOp
   #+END_SRC

** Equality
   The equality operator should have lower precednce than plus and minus,
   and should not group, that is, =(A = B = C)= is not allowed.
   #+BEGIN_SRC
   <bool expression> -> <expression> <bool> <expression>
   <bool>            -> EqualityOp
   #+END_SRC
